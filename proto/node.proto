syntax = "proto3";

service Gossip {
    //checks whether hash already exists
    rpc Poke (ReqId) returns (Bool) {}
    //sends new info
    rpc Push (ReqBody) returns (Void) {}

    //gets requests
    rpc GetAllRequests (Void) returns (Requests) {}
}

service Snowball {
    //gets a vote on this server's opinion
    rpc GetVote (Void) returns (ReqId) {}
    //a client sends request using this method
    rpc SendReq (ReqBody) returns (Void) {}

    //gets ordered requests (consensus reached whp)
    rpc GetOrderedReqs (Void) returns (Requests) {}
}

service Pbft {
    // client sends request
    rpc SendReq (PbftReq) returns (Void) {}
    // node sends prePrepare msg
    rpc SendPrePrepare (PrePrepareMsg) returns (Void) {}
    // node sends prepare msg
    rpc SendPrepare (PrepareMsg) returns (Void) {}
    // node sends commit msg
    rpc SendCommit (CommitMsg) returns (Void) {}
    // node sends reply msg to the client
    rpc SendReply (ReplyMsg) returns (Void) {}
}

message PbftReq {
    string clientID = 1;
    string operation = 2;
    int64 timestamp = 3;
    int64 sequenceID = 4;
}

message PrePrepareMsg {
    int64 viewID = 1;
    int64 sequenceID = 2;
    string digest = 3;
    PbftReq req = 4;
}

message PrepareMsg {
    int64 viewID = 1;
    int64 sequenceID = 2;
    string digest = 3;
    string nodeID = 4;
}

message CommitMsg {
    int64 viewID = 1;
    int64 sequenceID = 2;
    string digest = 3;
    string nodeID = 4;
}

message ReplyMsg {
    int64 viewID = 1;
    int64 timestamp = 2;
    string clientID = 3;
    string nodeID = 4;
    string result = 5;
}

message Requests {
    repeated string requests = 1;
}

message ReqId {
    bytes hash = 1;
}

message ReqBody {
    bytes body = 1;
}

message Bool {
    bool status = 1;
}

message Void {}
