// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: node.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Requests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []string `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *Requests) Reset() {
	*x = Requests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Requests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requests) ProtoMessage() {}

func (x *Requests) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requests.ProtoReflect.Descriptor instead.
func (*Requests) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{0}
}

func (x *Requests) GetRequests() []string {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ReqId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *ReqId) Reset() {
	*x = ReqId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqId) ProtoMessage() {}

func (x *ReqId) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqId.ProtoReflect.Descriptor instead.
func (*ReqId) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{1}
}

func (x *ReqId) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type ReqBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ReqBody) Reset() {
	*x = ReqBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqBody) ProtoMessage() {}

func (x *ReqBody) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqBody.ProtoReflect.Descriptor instead.
func (*ReqBody) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{2}
}

func (x *ReqBody) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Bool) Reset() {
	*x = Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bool) ProtoMessage() {}

func (x *Bool) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bool.ProtoReflect.Descriptor instead.
func (*Bool) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{3}
}

func (x *Bool) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{4}
}

type SeqNumMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeqNum  int64  `protobuf:"varint,1,opt,name=seq_num,json=seqNum,proto3" json:"seq_num,omitempty"`
	ReqHash []byte `protobuf:"bytes,2,opt,name=req_hash,json=reqHash,proto3" json:"req_hash,omitempty"` //hash of the corresponding request
}

func (x *SeqNumMsg) Reset() {
	*x = SeqNumMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeqNumMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeqNumMsg) ProtoMessage() {}

func (x *SeqNumMsg) ProtoReflect() protoreflect.Message {
	mi := &file_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeqNumMsg.ProtoReflect.Descriptor instead.
func (*SeqNumMsg) Descriptor() ([]byte, []int) {
	return file_node_proto_rawDescGZIP(), []int{5}
}

func (x *SeqNumMsg) GetSeqNum() int64 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *SeqNumMsg) GetReqHash() []byte {
	if x != nil {
		return x.ReqHash
	}
	return nil
}

var File_node_proto protoreflect.FileDescriptor

var file_node_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x08,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x1b, 0x0a, 0x05, 0x52, 0x65, 0x71, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x22, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0x1e, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x06, 0x0a, 0x04, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x09, 0x53, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x48, 0x61, 0x73, 0x68, 0x32, 0x62, 0x0a, 0x06, 0x47, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x04, 0x50, 0x6f, 0x6b, 0x65, 0x12, 0x06, 0x2e, 0x52, 0x65,
	0x71, 0x49, 0x64, 0x1a, 0x05, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x19, 0x0a, 0x04,
	0x50, 0x75, 0x73, 0x68, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x05,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x05, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x1a, 0x09, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x00, 0x32, 0x4d, 0x0a,
	0x08, 0x53, 0x6e, 0x6f, 0x77, 0x62, 0x61, 0x6c, 0x6c, 0x12, 0x23, 0x0a, 0x07, 0x47, 0x65, 0x74,
	0x56, 0x6f, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x4d, 0x73, 0x67,
	0x1a, 0x0a, 0x2e, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x1c,
	0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x42,
	0x6f, 0x64, 0x79, 0x1a, 0x05, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x32, 0x23, 0x0a, 0x04,
	0x50, 0x62, 0x66, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x08,
	0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x05, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22,
	0x00, 0x32, 0x25, 0x0a, 0x04, 0x4c, 0x62, 0x66, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x08, 0x2e, 0x52, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x1a,
	0x05, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x70, 0x6f, 0x63, 0x6b, 0x71, 0x69, 0x6e, 0x2f,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x6c, 0x65, 0x73, 0x73, 0x2d, 0x62, 0x66, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_node_proto_rawDescOnce sync.Once
	file_node_proto_rawDescData = file_node_proto_rawDesc
)

func file_node_proto_rawDescGZIP() []byte {
	file_node_proto_rawDescOnce.Do(func() {
		file_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_proto_rawDescData)
	})
	return file_node_proto_rawDescData
}

var file_node_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_node_proto_goTypes = []interface{}{
	(*Requests)(nil),  // 0: Requests
	(*ReqId)(nil),     // 1: ReqId
	(*ReqBody)(nil),   // 2: ReqBody
	(*Bool)(nil),      // 3: Bool
	(*Void)(nil),      // 4: Void
	(*SeqNumMsg)(nil), // 5: SeqNumMsg
}
var file_node_proto_depIdxs = []int32{
	1, // 0: Gossip.Poke:input_type -> ReqId
	2, // 1: Gossip.Push:input_type -> ReqBody
	4, // 2: Gossip.GetAllRequests:input_type -> Void
	5, // 3: Snowball.GetVote:input_type -> SeqNumMsg
	2, // 4: Snowball.SendReq:input_type -> ReqBody
	2, // 5: Pbft.GetReq:input_type -> ReqBody
	2, // 6: Lbft.LSendReq:input_type -> ReqBody
	3, // 7: Gossip.Poke:output_type -> Bool
	4, // 8: Gossip.Push:output_type -> Void
	0, // 9: Gossip.GetAllRequests:output_type -> Requests
	5, // 10: Snowball.GetVote:output_type -> SeqNumMsg
	4, // 11: Snowball.SendReq:output_type -> Void
	4, // 12: Pbft.GetReq:output_type -> Void
	4, // 13: Lbft.LSendReq:output_type -> Void
	7, // [7:14] is the sub-list for method output_type
	0, // [0:7] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_node_proto_init() }
func file_node_proto_init() {
	if File_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Requests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeqNumMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_node_proto_goTypes,
		DependencyIndexes: file_node_proto_depIdxs,
		MessageInfos:      file_node_proto_msgTypes,
	}.Build()
	File_node_proto = out.File
	file_node_proto_rawDesc = nil
	file_node_proto_goTypes = nil
	file_node_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GossipClient is the client API for Gossip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GossipClient interface {
	//checks whether hash already exists
	Poke(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Bool, error)
	//sends new info
	Push(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error)
	//gets requests
	GetAllRequests(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Requests, error)
}

type gossipClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipClient(cc grpc.ClientConnInterface) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) Poke(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/Gossip/Poke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Push(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Gossip/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) GetAllRequests(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Requests, error) {
	out := new(Requests)
	err := c.cc.Invoke(ctx, "/Gossip/GetAllRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GossipServer is the server API for Gossip service.
type GossipServer interface {
	//checks whether hash already exists
	Poke(context.Context, *ReqId) (*Bool, error)
	//sends new info
	Push(context.Context, *ReqBody) (*Void, error)
	//gets requests
	GetAllRequests(context.Context, *Void) (*Requests, error)
}

// UnimplementedGossipServer can be embedded to have forward compatible implementations.
type UnimplementedGossipServer struct {
}

func (*UnimplementedGossipServer) Poke(context.Context, *ReqId) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (*UnimplementedGossipServer) Push(context.Context, *ReqBody) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedGossipServer) GetAllRequests(context.Context, *Void) (*Requests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRequests not implemented")
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gossip/Poke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Poke(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gossip/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Push(ctx, req.(*ReqBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_GetAllRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).GetAllRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gossip/GetAllRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).GetAllRequests(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poke",
			Handler:    _Gossip_Poke_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Gossip_Push_Handler,
		},
		{
			MethodName: "GetAllRequests",
			Handler:    _Gossip_GetAllRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// SnowballClient is the client API for Snowball service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowballClient interface {
	//get vote from this node
	GetVote(ctx context.Context, in *SeqNumMsg, opts ...grpc.CallOption) (*SeqNumMsg, error)
	//a client sends request using this method
	SendReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error)
}

type snowballClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowballClient(cc grpc.ClientConnInterface) SnowballClient {
	return &snowballClient{cc}
}

func (c *snowballClient) GetVote(ctx context.Context, in *SeqNumMsg, opts ...grpc.CallOption) (*SeqNumMsg, error) {
	out := new(SeqNumMsg)
	err := c.cc.Invoke(ctx, "/Snowball/GetVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowballClient) SendReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Snowball/SendReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowballServer is the server API for Snowball service.
type SnowballServer interface {
	//get vote from this node
	GetVote(context.Context, *SeqNumMsg) (*SeqNumMsg, error)
	//a client sends request using this method
	SendReq(context.Context, *ReqBody) (*Void, error)
}

// UnimplementedSnowballServer can be embedded to have forward compatible implementations.
type UnimplementedSnowballServer struct {
}

func (*UnimplementedSnowballServer) GetVote(context.Context, *SeqNumMsg) (*SeqNumMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVote not implemented")
}
func (*UnimplementedSnowballServer) SendReq(context.Context, *ReqBody) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReq not implemented")
}

func RegisterSnowballServer(s *grpc.Server, srv SnowballServer) {
	s.RegisterService(&_Snowball_serviceDesc, srv)
}

func _Snowball_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SeqNumMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowballServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snowball/GetVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowballServer).GetVote(ctx, req.(*SeqNumMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowball_SendReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowballServer).SendReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snowball/SendReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowballServer).SendReq(ctx, req.(*ReqBody))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snowball_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Snowball",
	HandlerType: (*SnowballServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVote",
			Handler:    _Snowball_GetVote_Handler,
		},
		{
			MethodName: "SendReq",
			Handler:    _Snowball_SendReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// PbftClient is the client API for Pbft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PbftClient interface {
	// client sends request
	GetReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error)
}

type pbftClient struct {
	cc grpc.ClientConnInterface
}

func NewPbftClient(cc grpc.ClientConnInterface) PbftClient {
	return &pbftClient{cc}
}

func (c *pbftClient) GetReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Pbft/GetReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PbftServer is the server API for Pbft service.
type PbftServer interface {
	// client sends request
	GetReq(context.Context, *ReqBody) (*Void, error)
}

// UnimplementedPbftServer can be embedded to have forward compatible implementations.
type UnimplementedPbftServer struct {
}

func (*UnimplementedPbftServer) GetReq(context.Context, *ReqBody) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReq not implemented")
}

func RegisterPbftServer(s *grpc.Server, srv PbftServer) {
	s.RegisterService(&_Pbft_serviceDesc, srv)
}

func _Pbft_GetReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbftServer).GetReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pbft/GetReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbftServer).GetReq(ctx, req.(*ReqBody))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pbft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pbft",
	HandlerType: (*PbftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReq",
			Handler:    _Pbft_GetReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// LbftClient is the client API for Lbft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LbftClient interface {
	LSendReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error)
}

type lbftClient struct {
	cc grpc.ClientConnInterface
}

func NewLbftClient(cc grpc.ClientConnInterface) LbftClient {
	return &lbftClient{cc}
}

func (c *lbftClient) LSendReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Lbft/LSendReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LbftServer is the server API for Lbft service.
type LbftServer interface {
	LSendReq(context.Context, *ReqBody) (*Void, error)
}

// UnimplementedLbftServer can be embedded to have forward compatible implementations.
type UnimplementedLbftServer struct {
}

func (*UnimplementedLbftServer) LSendReq(context.Context, *ReqBody) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSendReq not implemented")
}

func RegisterLbftServer(s *grpc.Server, srv LbftServer) {
	s.RegisterService(&_Lbft_serviceDesc, srv)
}

func _Lbft_LSendReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LbftServer).LSendReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Lbft/LSendReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LbftServer).LSendReq(ctx, req.(*ReqBody))
	}
	return interceptor(ctx, in, info, handler)
}

var _Lbft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Lbft",
	HandlerType: (*LbftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LSendReq",
			Handler:    _Lbft_LSendReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
