// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

package node

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Requests struct {
	Requests             []string `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Requests) Reset()         { *m = Requests{} }
func (m *Requests) String() string { return proto.CompactTextString(m) }
func (*Requests) ProtoMessage()    {}
func (*Requests) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{0}
}

func (m *Requests) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Requests.Unmarshal(m, b)
}
func (m *Requests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Requests.Marshal(b, m, deterministic)
}
func (m *Requests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Requests.Merge(m, src)
}
func (m *Requests) XXX_Size() int {
	return xxx_messageInfo_Requests.Size(m)
}
func (m *Requests) XXX_DiscardUnknown() {
	xxx_messageInfo_Requests.DiscardUnknown(m)
}

var xxx_messageInfo_Requests proto.InternalMessageInfo

func (m *Requests) GetRequests() []string {
	if m != nil {
		return m.Requests
	}
	return nil
}

type ReqId struct {
	Hash                 []byte   `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqId) Reset()         { *m = ReqId{} }
func (m *ReqId) String() string { return proto.CompactTextString(m) }
func (*ReqId) ProtoMessage()    {}
func (*ReqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{1}
}

func (m *ReqId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqId.Unmarshal(m, b)
}
func (m *ReqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqId.Marshal(b, m, deterministic)
}
func (m *ReqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqId.Merge(m, src)
}
func (m *ReqId) XXX_Size() int {
	return xxx_messageInfo_ReqId.Size(m)
}
func (m *ReqId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqId proto.InternalMessageInfo

func (m *ReqId) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ReqBody struct {
	Body                 []byte   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqBody) Reset()         { *m = ReqBody{} }
func (m *ReqBody) String() string { return proto.CompactTextString(m) }
func (*ReqBody) ProtoMessage()    {}
func (*ReqBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{2}
}

func (m *ReqBody) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqBody.Unmarshal(m, b)
}
func (m *ReqBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqBody.Marshal(b, m, deterministic)
}
func (m *ReqBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqBody.Merge(m, src)
}
func (m *ReqBody) XXX_Size() int {
	return xxx_messageInfo_ReqBody.Size(m)
}
func (m *ReqBody) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqBody.DiscardUnknown(m)
}

var xxx_messageInfo_ReqBody proto.InternalMessageInfo

func (m *ReqBody) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

type Bool struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bool) Reset()         { *m = Bool{} }
func (m *Bool) String() string { return proto.CompactTextString(m) }
func (*Bool) ProtoMessage()    {}
func (*Bool) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{3}
}

func (m *Bool) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bool.Unmarshal(m, b)
}
func (m *Bool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bool.Marshal(b, m, deterministic)
}
func (m *Bool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bool.Merge(m, src)
}
func (m *Bool) XXX_Size() int {
	return xxx_messageInfo_Bool.Size(m)
}
func (m *Bool) XXX_DiscardUnknown() {
	xxx_messageInfo_Bool.DiscardUnknown(m)
}

var xxx_messageInfo_Bool proto.InternalMessageInfo

func (m *Bool) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_0c843d59d2d938e7, []int{4}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Requests)(nil), "Requests")
	proto.RegisterType((*ReqId)(nil), "ReqId")
	proto.RegisterType((*ReqBody)(nil), "ReqBody")
	proto.RegisterType((*Bool)(nil), "Bool")
	proto.RegisterType((*Void)(nil), "Void")
}

func init() { proto.RegisterFile("node.proto", fileDescriptor_0c843d59d2d938e7) }

var fileDescriptor_0c843d59d2d938e7 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0x31, 0x4f, 0xf3, 0x30,
	0x10, 0x86, 0x53, 0x7d, 0x8e, 0x93, 0x9e, 0x3e, 0x31, 0xdc, 0x00, 0x25, 0x05, 0x54, 0x19, 0x84,
	0x3a, 0x79, 0x28, 0xbf, 0x80, 0x2e, 0x11, 0x13, 0x91, 0x2b, 0x75, 0x4f, 0xe4, 0x43, 0x29, 0x44,
	0xb9, 0x26, 0x76, 0x84, 0xfa, 0xef, 0x51, 0x42, 0xd2, 0xa9, 0x6c, 0xef, 0xf9, 0x39, 0xbf, 0x8f,
	0x2c, 0x03, 0xd4, 0x6c, 0x49, 0x1f, 0x5b, 0xf6, 0xac, 0x9e, 0x21, 0x36, 0xd4, 0x74, 0xe4, 0xbc,
	0xc3, 0x04, 0xe2, 0x76, 0xcc, 0x8b, 0xd9, 0xea, 0xdf, 0x7a, 0x6e, 0xce, 0xb3, 0x5a, 0x42, 0x68,
	0xa8, 0x79, 0xb3, 0x88, 0x20, 0xca, 0xdc, 0x95, 0x8b, 0xd9, 0x6a, 0xb6, 0xfe, 0x6f, 0x86, 0xac,
	0xee, 0x21, 0x32, 0xd4, 0x6c, 0xd9, 0x9e, 0x7a, 0x5c, 0xb0, 0x3d, 0x4d, 0xb8, 0xcf, 0xea, 0x01,
	0xc4, 0x96, 0xb9, 0xc2, 0x6b, 0x90, 0xce, 0xe7, 0xbe, 0x73, 0x03, 0x8d, 0xcd, 0x38, 0x29, 0x09,
	0x62, 0xcf, 0x07, 0xbb, 0x29, 0x40, 0xa6, 0xec, 0xdc, 0xe1, 0x88, 0x37, 0x20, 0x32, 0xfe, 0x22,
	0x94, 0x7a, 0x90, 0x26, 0xa1, 0xee, 0x0b, 0x54, 0x80, 0xb7, 0x20, 0xb2, 0xce, 0x95, 0x18, 0xeb,
	0x51, 0x98, 0x84, 0xba, 0xbf, 0xab, 0x02, 0x7c, 0x82, 0xab, 0x94, 0xfc, 0x6b, 0x55, 0x9d, 0xdf,
	0xf3, 0x8b, 0x92, 0xb9, 0x9e, 0x4e, 0x54, 0xb0, 0xf9, 0x84, 0x78, 0x57, 0xf3, 0x77, 0x91, 0x57,
	0x15, 0x26, 0x10, 0xa5, 0xe4, 0xf7, 0xec, 0x69, 0x5a, 0x1d, 0x7d, 0x2a, 0xc0, 0x3b, 0x88, 0x76,
	0x54, 0x5b, 0x43, 0xcd, 0xdf, 0xae, 0xf7, 0xd6, 0x52, 0x4b, 0xfd, 0xce, 0x65, 0xd7, 0x23, 0x88,
	0xac, 0xf8, 0xf0, 0xb8, 0x04, 0x99, 0x92, 0xbf, 0x5c, 0x55, 0xc8, 0xe1, 0x1f, 0x5e, 0x7e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x47, 0x0d, 0x5f, 0x6d, 0x95, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GossipClient is the client API for Gossip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GossipClient interface {
	//checks whether hash already exists
	Poke(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Bool, error)
	//sends new info
	Push(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error)
	//gets requests
	GetAllRequests(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Requests, error)
}

type gossipClient struct {
	cc *grpc.ClientConn
}

func NewGossipClient(cc *grpc.ClientConn) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) Poke(ctx context.Context, in *ReqId, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/Gossip/Poke", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Push(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Gossip/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) GetAllRequests(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Requests, error) {
	out := new(Requests)
	err := c.cc.Invoke(ctx, "/Gossip/GetAllRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GossipServer is the server API for Gossip service.
type GossipServer interface {
	//checks whether hash already exists
	Poke(context.Context, *ReqId) (*Bool, error)
	//sends new info
	Push(context.Context, *ReqBody) (*Void, error)
	//gets requests
	GetAllRequests(context.Context, *Void) (*Requests, error)
}

// UnimplementedGossipServer can be embedded to have forward compatible implementations.
type UnimplementedGossipServer struct {
}

func (*UnimplementedGossipServer) Poke(ctx context.Context, req *ReqId) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Poke not implemented")
}
func (*UnimplementedGossipServer) Push(ctx context.Context, req *ReqBody) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedGossipServer) GetAllRequests(ctx context.Context, req *Void) (*Requests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRequests not implemented")
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_Poke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Poke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gossip/Poke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Poke(ctx, req.(*ReqId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gossip/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Push(ctx, req.(*ReqBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_GetAllRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).GetAllRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Gossip/GetAllRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).GetAllRequests(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poke",
			Handler:    _Gossip_Poke_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Gossip_Push_Handler,
		},
		{
			MethodName: "GetAllRequests",
			Handler:    _Gossip_GetAllRequests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// SnowballClient is the client API for Snowball service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowballClient interface {
	//gets a vote on this server's opinion
	GetVote(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ReqId, error)
	//a client sends request using this method
	SendReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error)
	//gets ordered requests (consensus reached whp)
	GetOrderedReqs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Requests, error)
}

type snowballClient struct {
	cc *grpc.ClientConn
}

func NewSnowballClient(cc *grpc.ClientConn) SnowballClient {
	return &snowballClient{cc}
}

func (c *snowballClient) GetVote(ctx context.Context, in *Void, opts ...grpc.CallOption) (*ReqId, error) {
	out := new(ReqId)
	err := c.cc.Invoke(ctx, "/Snowball/GetVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowballClient) SendReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Snowball/SendReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowballClient) GetOrderedReqs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Requests, error) {
	out := new(Requests)
	err := c.cc.Invoke(ctx, "/Snowball/GetOrderedReqs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowballServer is the server API for Snowball service.
type SnowballServer interface {
	//gets a vote on this server's opinion
	GetVote(context.Context, *Void) (*ReqId, error)
	//a client sends request using this method
	SendReq(context.Context, *ReqBody) (*Void, error)
	//gets ordered requests (consensus reached whp)
	GetOrderedReqs(context.Context, *Void) (*Requests, error)
}

// UnimplementedSnowballServer can be embedded to have forward compatible implementations.
type UnimplementedSnowballServer struct {
}

func (*UnimplementedSnowballServer) GetVote(ctx context.Context, req *Void) (*ReqId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVote not implemented")
}
func (*UnimplementedSnowballServer) SendReq(ctx context.Context, req *ReqBody) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReq not implemented")
}
func (*UnimplementedSnowballServer) GetOrderedReqs(ctx context.Context, req *Void) (*Requests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderedReqs not implemented")
}

func RegisterSnowballServer(s *grpc.Server, srv SnowballServer) {
	s.RegisterService(&_Snowball_serviceDesc, srv)
}

func _Snowball_GetVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowballServer).GetVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snowball/GetVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowballServer).GetVote(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowball_SendReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowballServer).SendReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snowball/SendReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowballServer).SendReq(ctx, req.(*ReqBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowball_GetOrderedReqs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowballServer).GetOrderedReqs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Snowball/GetOrderedReqs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowballServer).GetOrderedReqs(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snowball_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Snowball",
	HandlerType: (*SnowballServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVote",
			Handler:    _Snowball_GetVote_Handler,
		},
		{
			MethodName: "SendReq",
			Handler:    _Snowball_SendReq_Handler,
		},
		{
			MethodName: "GetOrderedReqs",
			Handler:    _Snowball_GetOrderedReqs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

// PbftClient is the client API for Pbft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PbftClient interface {
	// client sends request
	GetReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error)
}

type pbftClient struct {
	cc *grpc.ClientConn
}

func NewPbftClient(cc *grpc.ClientConn) PbftClient {
	return &pbftClient{cc}
}

func (c *pbftClient) GetReq(ctx context.Context, in *ReqBody, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/Pbft/GetReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PbftServer is the server API for Pbft service.
type PbftServer interface {
	// client sends request
	GetReq(context.Context, *ReqBody) (*Void, error)
}

// UnimplementedPbftServer can be embedded to have forward compatible implementations.
type UnimplementedPbftServer struct {
}

func (*UnimplementedPbftServer) GetReq(ctx context.Context, req *ReqBody) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReq not implemented")
}

func RegisterPbftServer(s *grpc.Server, srv PbftServer) {
	s.RegisterService(&_Pbft_serviceDesc, srv)
}

func _Pbft_GetReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PbftServer).GetReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Pbft/GetReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PbftServer).GetReq(ctx, req.(*ReqBody))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pbft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Pbft",
	HandlerType: (*PbftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReq",
			Handler:    _Pbft_GetReq_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
